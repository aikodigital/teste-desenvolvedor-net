// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TesteDesenvolvedor.Repository.Context;

namespace TesteDesenvolvedor.Repository.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TesteDesenvolvedor.Domain.Linha", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Linhas");
                });

            modelBuilder.Entity("TesteDesenvolvedor.Domain.LinhaParada", b =>
                {
                    b.Property<long>("LinhaId")
                        .HasColumnType("bigint");

                    b.Property<long>("ParadaId")
                        .HasColumnType("bigint");

                    b.HasKey("LinhaId", "ParadaId");

                    b.HasIndex("ParadaId");

                    b.ToTable("LinhasParadas");
                });

            modelBuilder.Entity("TesteDesenvolvedor.Domain.Parada", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Paradas");
                });

            modelBuilder.Entity("TesteDesenvolvedor.Domain.PosicaoVeiculo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<long>("VeiculoId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("VeiculoId")
                        .IsUnique();

                    b.ToTable("PosicaoVeiculos");
                });

            modelBuilder.Entity("TesteDesenvolvedor.Domain.Veiculo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("LinhaId")
                        .HasColumnType("bigint");

                    b.Property<string>("Modelo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("LinhaId");

                    b.ToTable("Veiculos");
                });

            modelBuilder.Entity("TesteDesenvolvedor.Domain.LinhaParada", b =>
                {
                    b.HasOne("TesteDesenvolvedor.Domain.Linha", "Linha")
                        .WithMany("LinhasParadas")
                        .HasForeignKey("LinhaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TesteDesenvolvedor.Domain.Parada", "Parada")
                        .WithMany("LinhaParadas")
                        .HasForeignKey("ParadaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TesteDesenvolvedor.Domain.PosicaoVeiculo", b =>
                {
                    b.HasOne("TesteDesenvolvedor.Domain.Veiculo", "Veiculo")
                        .WithOne("PosicaoVeiculo")
                        .HasForeignKey("TesteDesenvolvedor.Domain.PosicaoVeiculo", "VeiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TesteDesenvolvedor.Domain.Veiculo", b =>
                {
                    b.HasOne("TesteDesenvolvedor.Domain.Linha", "Linha")
                        .WithMany("Veiculos")
                        .HasForeignKey("LinhaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
