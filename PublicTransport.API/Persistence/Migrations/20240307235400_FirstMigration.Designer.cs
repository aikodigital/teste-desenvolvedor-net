// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PublicTransport.API.Persistence;

#nullable disable

namespace PublicTransport.API.Persistence.Migrations
{
    [DbContext(typeof(PublicTransportDbContext))]
    [Migration("20240307235400_FirstMigration")]
    partial class FirstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PublicTransport.API.Entities.Line", b =>
                {
                    b.Property<long>("LineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LineId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LineId");

                    b.ToTable("Lines");
                });

            modelBuilder.Entity("PublicTransport.API.Entities.LineStop", b =>
                {
                    b.Property<long>("LineStopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LineStopId"));

                    b.Property<long>("LineId")
                        .HasColumnType("bigint");

                    b.Property<long>("StopId")
                        .HasColumnType("bigint");

                    b.HasKey("LineStopId");

                    b.HasIndex("LineId");

                    b.HasIndex("StopId");

                    b.ToTable("LineStops");
                });

            modelBuilder.Entity("PublicTransport.API.Entities.Stop", b =>
                {
                    b.Property<long>("StopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("StopId"));

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StopId");

                    b.ToTable("Stops");
                });

            modelBuilder.Entity("PublicTransport.API.Entities.Vehicle", b =>
                {
                    b.Property<long>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("VehicleId"));

                    b.Property<long>("LineId")
                        .HasColumnType("bigint");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleId");

                    b.HasIndex("LineId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("PublicTransport.API.Entities.VehiclePosition", b =>
                {
                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<long>("VehiclePositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("VehiclePositionId"));

                    b.HasKey("VehicleId");

                    b.ToTable("VehiclePositions");
                });

            modelBuilder.Entity("PublicTransport.API.Entities.LineStop", b =>
                {
                    b.HasOne("PublicTransport.API.Entities.Line", "Line")
                        .WithMany("LineStops")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PublicTransport.API.Entities.Stop", "Stop")
                        .WithMany("LineStops")
                        .HasForeignKey("StopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Line");

                    b.Navigation("Stop");
                });

            modelBuilder.Entity("PublicTransport.API.Entities.Vehicle", b =>
                {
                    b.HasOne("PublicTransport.API.Entities.Line", "Line")
                        .WithMany()
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Line");
                });

            modelBuilder.Entity("PublicTransport.API.Entities.VehiclePosition", b =>
                {
                    b.HasOne("PublicTransport.API.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("PublicTransport.API.Entities.Line", b =>
                {
                    b.Navigation("LineStops");
                });

            modelBuilder.Entity("PublicTransport.API.Entities.Stop", b =>
                {
                    b.Navigation("LineStops");
                });
#pragma warning restore 612, 618
        }
    }
}
