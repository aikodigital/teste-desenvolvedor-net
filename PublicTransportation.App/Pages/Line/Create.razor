@page "/lines/new"
@inject HttpClient http
@inject NavigationManager navegation
@inject IJSRuntime js

<h3>New Line</h3>

<div class="card shadow my-4 border-0">
    <div class="card-body">
        <EditForm Model="@line" OnValidSubmit="@SendForm">
            <DataAnnotationsValidator />
            <div class="row">
                <div class="col">
                    <div class="form-group">
                        <label form="name">Name</label>
                        <div>
                            <InputText @bind-Value="@line.Name" class="form-control" id="nameLine" />
                            <ValidationMessage For="@(() => line.Name)" />
                        </div>
                    </div>
                </div>
            </div>

            @if (stops is not null && stops.Count() > 0)
            {
                <div class="row mt-5">
                    <div class="col-4">
                        <div class="input-group">
                            <InputSelect class="form-control" @bind-Value="@selectedStopId">
                                <option value="0" selected>Select a stop to add to the line...</option>
                                @foreach (var stop in stops)
                                {
                                    <option value="@stop.Id">@stop.Name</option>
                                }
                            </InputSelect>
                            <button type="button" class="btn btn-primary" @onclick="(() => AddStop())">Add Stop</button>
                        </div>
                    </div>
                </div>

                @if (line.Stops is not null && line.Stops.Count() > 0)
                {
                    <div class="row mt-5">
                        <div class="col">
                            <table class="table">
                                <thead class="table-dark">
                                    <tr>
                                        <td>Name</td>
                                        <td>Latitude</td>
                                        <td>Longitude</td>
                                        <td></td>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach(var lineStop in line.Stops)
                                    {
                                        var stop = stops.FirstOrDefault(x => x.Id == lineStop.StopId);
                                        <tr>
                                            <td>@stop.Name</td>
                                            <td>@stop.Latitude</td>
                                            <td>@stop.Longitude</td>
                                            <td>
                                                <div class="btn btn-danger" @onclick="(() => RemoveStop(lineStop))">
                                                    Remove
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                }
            }
            <br />
            <button type="submit" class="btn btn-success">Register</button>
            <div class="btn btn-dark" @onclick="Back">Back</div>
        </EditForm>
    </div>
</div>

@code {
    CreateLine line = new CreateLine();
    ICollection<Stop> stops = new List<Stop>();
    long selectedStopId = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadStops();
    }

    void AddStop()
    {
        if(selectedStopId == 0) return;
        if (line.Stops is not null && line.Stops.Any(x => x.StopId == selectedStopId)) return;

        if (line.Stops is null) line.Stops = new List<LineStop>();
        line.Stops.Add(new LineStop { StopId = selectedStopId });
    }

    void RemoveStop(LineStop lineStop)
    {
        line.Stops.Remove(lineStop);
    }

    async Task SendForm()
    {
        HttpResponseMessage response;

        response = await http.PostAsJsonAsync("Line", line);

        if (response.IsSuccessStatusCode)
        {
            await js.InvokeVoidAsync("SweetAlert", new SweetAlertData(response.StatusCode, "Record created successfully."));

            if (response.StatusCode == System.Net.HttpStatusCode.Created)
            {
                Back();
            }
        }

    }

    async Task LoadStops()
    {
        var httpResponse = await http.GetAsync($"Stop");

        if (httpResponse.IsSuccessStatusCode)
        {
            var responseString = await httpResponse.Content.ReadAsStringAsync();
            var getAllResponse = JsonSerializer.Deserialize<GetAllResponse<Stop>>(responseString,
                new JsonSerializerOptions()
                    {
                        PropertyNameCaseInsensitive = true
                    });
            stops = getAllResponse.Rows;
        }
    }

    protected void Back() => navegation.NavigateTo("lines");
}