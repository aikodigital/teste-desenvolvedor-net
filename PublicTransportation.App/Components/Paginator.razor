<nav aria-label="Pagination">
    <ul class="pagination justify-content-center">
        @foreach (var link in links)
        {
            <li @onclick="@(() => SelectedPageLink(link))"
                style="cursor: pointer;"
                class="page-item @(link.Enable ? null : "disable") @(link.Active ? "active" : null)">
                <span class="page-link" href="#">@link.Text</span>
            </li>
        }
    </ul>
</nav>

@code {
    [Parameter] public int CurrentPage { get; set; } = 0;
    [Parameter] public int TotalCount { get; set; } = 0;
    [Parameter] public int Radius { get; set; } = 3;
    [Parameter] public int PerPage { get; set; } = 5;
    [Parameter] public EventCallback<int> SelectedPage { get; set; }

    List<LinkModel> links;

    private async Task SelectedPageLink(LinkModel link)
    {
        if (link.Page == CurrentPage)
            return;

        if (!link.Enable)
            return;

        CurrentPage = link.Page;
        await SelectedPage.InvokeAsync(link.Page);
    }

    class LinkModel
    {
        public LinkModel(int page) : this(page, true) { }
        public LinkModel(int page, bool enable) : this(page, enable, (page + 1).ToString()) { }
        public LinkModel(int page, bool enable, string text)
        {
            Page = page;
            Enable = enable;
            Text = text;
        }

        public string Text { get; set; }
        public int Page { get; set; }
        public bool Enable { get; set; }
        public bool Active { get; set; }

    }

    protected override void OnParametersSet()
    {
        LoadPages();
    }
    private void LoadPages()
    {
        links = new List<LinkModel>();

        var isLinkPreviousPageEnabled = CurrentPage != 0;
        var previousPage = CurrentPage - 1;

        if(CurrentPage > 0)
            links.Add(new LinkModel(previousPage, isLinkPreviousPageEnabled, "Previous"));

        var totalPages = 1;

        if (TotalCount > PerPage){
            decimal result = (decimal)TotalCount / PerPage;
            totalPages = (int) Math.Ceiling(result);
        }

        for (int i = 0; i < totalPages; i++)
        {
            if (i >= CurrentPage - Radius && i <= CurrentPage + Radius)
            {
                links.Add(new LinkModel(i)
                    {
                        Active = CurrentPage == i
                    });
            }
        }

        var isLinkNextPageEnabled = CurrentPage != totalPages;
        var nextPage = CurrentPage + 1;

        if(CurrentPage + 1 < totalPages)
            links.Add(new LinkModel(nextPage, isLinkNextPageEnabled, "Next"));

    }
}
