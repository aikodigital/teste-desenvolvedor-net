// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OlhoVivo.Infra.Data.Context;

#nullable disable

namespace OlhoVivo.Infra.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240126174714_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OlhoVivo.Core.Domain.Entities.Line", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Lines");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "SOL NASCENTE / TERM. PIRITUBA",
                            VehicleId = 0L
                        },
                        new
                        {
                            Id = 2L,
                            Name = "TERM. LAPA / PÇA. RAMOS DE AZEVEDO",
                            VehicleId = 0L
                        },
                        new
                        {
                            Id = 3L,
                            Name = "TERM. PQ. D. PEDRO II / TERM. BANDEIRA",
                            VehicleId = 0L
                        });
                });

            modelBuilder.Entity("OlhoVivo.Core.Domain.Entities.Stop", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("Latitude")
                        .HasPrecision(20, 10)
                        .HasColumnType("float(20)");

                    b.Property<long>("LineId")
                        .HasColumnType("bigint");

                    b.Property<double>("Longitude")
                        .HasPrecision(20, 10)
                        .HasColumnType("float(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.ToTable("Stops");
                });

            modelBuilder.Entity("OlhoVivo.Core.Domain.Entities.Vehicle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("LineId")
                        .HasColumnType("bigint");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("OlhoVivo.Core.Domain.Entities.VehiclePosition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("Latitude")
                        .HasPrecision(20, 10)
                        .HasColumnType("float(20)");

                    b.Property<double>("Longitude")
                        .HasPrecision(20, 10)
                        .HasColumnType("float(20)");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("VehiclesPositions");
                });

            modelBuilder.Entity("OlhoVivo.Core.Domain.Entities.Stop", b =>
                {
                    b.HasOne("OlhoVivo.Core.Domain.Entities.Line", "Line")
                        .WithMany("Stops")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Line");
                });

            modelBuilder.Entity("OlhoVivo.Core.Domain.Entities.Vehicle", b =>
                {
                    b.HasOne("OlhoVivo.Core.Domain.Entities.Line", "Line")
                        .WithMany("Vehicles")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Line");
                });

            modelBuilder.Entity("OlhoVivo.Core.Domain.Entities.VehiclePosition", b =>
                {
                    b.HasOne("OlhoVivo.Core.Domain.Entities.Vehicle", "Vehicle")
                        .WithOne("VehiclePosition")
                        .HasForeignKey("OlhoVivo.Core.Domain.Entities.VehiclePosition", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("OlhoVivo.Core.Domain.Entities.Line", b =>
                {
                    b.Navigation("Stops");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("OlhoVivo.Core.Domain.Entities.Vehicle", b =>
                {
                    b.Navigation("VehiclePosition")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
